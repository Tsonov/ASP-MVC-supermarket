@model Supermarket.Main.Areas.Management.Models.ProductOperationDetailsViewModel

@{
    ViewBag.Title = "New sale";
}

<h2>Make a new sale</h2>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "addProductToListForm" }))
{
    <div id="addProductInfo">
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)

        @(Html.Kendo().DropDownList()
            .Name("Product")
            .DataTextField("Text")
            .DataValueField("Value")
            .BindTo(Model.AvailableProducts)
            .Events(e =>
                {
                    e.Select("productSelected").DataBound("dataBound");
                })
        )

        @Html.LabelFor(model => model.Amount)
        @Html.EditorFor(model => model.Amount)
        @Html.ValidationMessageFor(model => model.Amount)

        <span id="amountInformation"></span>
        <br />
        <input type="button" id="btnAddProductToList" value="Add to list" />
    </div>
}

<div id="grid"></div>
<label for="totalPriceForAll">Total:</label>
<input type="text" id="totalPriceForAll" value="0.00" disabled="disabled" />
<input id="submitTransaction" type="button" value="Make transaction" />

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        //Initialize kendo grid
        $(function () {
            $("#grid").kendoGrid({
                dataSource: {
                    pageSize: 15,
                },
                pageable: true,
                schema: {
                    model: {
                        id: "ID",
                        fields: {
                            ID: { editable: false },
                            productName: {},
                            productAmount: {},
                            pricePerUnit: {},
                            totalPrice: {},
                        }
                    }
                },
                columns: [
                        {
                            field: "productName",
                            title: "Product name"
                        },
                        {
                            field: "productAmount",
                            title: "Product amount"
                        },
                        {
                            field: "pricePerUnit",
                            title: "Price per unit"
                        },
                        {
                            field: "totalPrice",
                            title: "Total Price"
                        },
                ]
            });
        });

        $(function () {
            $("#btnAddProductToList").on("click", function () {
                var form = $("#addProductToListForm");
                form.validate();
                if (form.valid()) {
                    var dropDownList = $("#Product").data("kendoDropDownList");
                    var productName = dropDownList.text();
                    var productId = dropDownList.value();
                    var amount = $("#@Html.IdFor(model => model.Amount)").val();
                    var amountInStore = getProductsInStock(productId);
                    if (amount > amountInStore) {
                        $("#amountInformation").text("There are only " + amountInStore + " units available in stock");
                    } else {
                        var pricePerUnit = getProductPrice(productId);
                        if (pricePerUnit != -1) {
                            //update kendo
                            var grid = $("#grid").data("kendoGrid");
                            grid.dataSource.add({
                                ID: productId,
                                productName: productName,
                                productAmount: amount,
                                pricePerUnit: pricePerUnit,
                                totalPrice: amount * pricePerUnit
                            });
                            calculateTotal();
                        }
                    }
                }
            })
        });

        function calculateTotal() {
            var totalAmount = 0;
            var gridData = $("#grid").data("kendoGrid").dataSource.data();
            if (gridData.length != 0) {
                $.each(gridData, function (i, row) {
                    totalAmount += Number(row.totalPrice);
                });
            }
            totalAmount = totalAmount.toFixed(2);
            $("#totalPriceForAll").val(totalAmount);
        }

        function getProductPrice(id) {
            var storePrice = -1;
            $.ajax({
                type: 'Get',
                dataType: 'json',
                contentType: "application/json; charset=utf-8",
                url: "@Url.Action("GetProductPrice")",
                data: { productId: id },
                traditional: true,
                async: false,
                success: function (jsonFromServer) {
                    storePrice = jsonFromServer.price;
                },
                error: function () {
                    alert("Unable to get the store price for the product!");
                }
            });
            return storePrice;
        }

        $(function () {
            var submitButton = $("#submitTransaction");
            submitButton.on("click", function () {
                submitButton.prop("disabled", true);
                var sales = [];
                var gridData = $("#grid").data("kendoGrid").dataSource.data();
                $.each(gridData, function (i, row) {
                    var id = row.ID;
                    var amount = row.productAmount;
                    var pricePerUnit = row.pricePerUnit;
                    var sale = {
                        ProductId: id,
                        Amount: amount,
                        PricePerUnit: pricePerUnit
                    };
                    sales.push(sale)
                });

                var verificationToken = $('#addProductInfo [name=__RequestVerificationToken]').val();
                var headers = {};
                headers['__RequestVerificationToken'] = verificationToken;
                $.ajax({
                    type: 'Post',
                    dataType: 'json',
                    headers: headers,
                    contentType: "application/json; charset=utf-8",
                    url: "@Url.Action("PerformSale")",
                    data: JSON.stringify(sales),
                    traditional: true,
                    success: function (result) {
                        if (result.success == false) {
                            alert(result.error);
                        } else {
                            alert(result.message);
                            window.location.replace("/Management/");
                        }
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        alert("An error has occurred, please try again or inform an administrator!");
                    }
                });
                submitButton.prop("disabled", false);
            })
        });



        function getProductsInStock(productId) {
            productId = Number(productId); //Check in case an invalid argument was given
            var amount = 0;
            $.ajax({
                type: 'Get',
                dataType: 'json',
                contentType: "application/json; charset=utf-8",
                url: "@Url.Action("GetAmountInStock")",
                data: { productId: productId },
                traditional: true,
                async: false,
                success: function (jsonFromServer) {
                    amount = jsonFromServer.amount;
                }
            });
            return amount;
        }

        function dataBound() {
            var dropDown = $("#Product").data("kendoDropDownList")
            var amount = getProductsInStock(dropDown.value());
            setAmountInfo(amount);
        }

        function productSelected(e) {
            var dataItem = this.dataItem(e.item.index());
            var amount = getProductsInStock(dataItem.Value);
            setAmountInfo(amount);
        }

        function setAmountInfo(amount) {
            $("#amountInformation").text("Currently in stock: " + amount);
        }
    </script>
}


